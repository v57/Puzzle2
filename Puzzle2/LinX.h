//
//  LinX.h
//  IsometricEngine
//
//  Created by LinO_dska on 15.08.13.
//  Copyright (c) 2013 LinO_dska. All rights reserved.
//

#ifndef LinX_h
#define LinX_h
#import <Foundation/Foundation.h>


//////////////////////////////DEFINE//////////////////////////////


#define NSLog(FORMAT, ...) printf("%s\n", [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);
#define POINT_IN_POLYGON_BEAM_SIZE 10000
typedef enum {q_first, q_second, q_third, q_fourth} quadrant;
typedef enum {dir4_east, dir4_north, dir4_west, dir4_south,	dir4_nodir}	dir4type;
typedef enum {dir8_east, dir8_northeast, dir8_north, dir8_northwest, dir8_west,dir8_southwest,	dir8_south,	dir8_southeast,	dir8_nodir} dir8type;
typedef enum {alignment_left,alignment_center,alignment_right} alignment_type;
static const CGRect iPadRect = {
    .origin.x = .0f,
    .origin.y = .0f,
    .size.width = 1024.0f,
    .size.height = 768.0f
};
static const CGRect iPadRectSB = {
    .origin.x = .0f,
    .origin.y = .0f,
    .size.width = 1024.0f,
    .size.height = 748.0f
};
static const float sinx[360] = {0.000000,0.017452,0.034899,0.052336,0.069756,0.087156,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.342020,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.453990,0.469472,0.484810,0.500000,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.629320,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.719340,0.731354,0.743145,0.754710,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.874620,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.933580,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.974370,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.998630,0.999391,0.999848,1.000000,0.999848,0.999391,0.998630,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.974370,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.933580,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.874620,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.754710,0.743145,0.731354,0.719340,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.629320,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.500000,0.484810,0.469472,0.453990,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.342020,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.087156,0.069756,0.052336,0.034899,0.017452,0.000000,-0.017452,-0.034899,-0.052336,-0.069756,-0.087156,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.342020,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.453990,-0.469472,-0.484810,-0.500000,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.629320,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.719340,-0.731354,-0.743145,-0.754710,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.874620,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.933580,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.974370,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.998630,-0.999391,-0.999848,-1.000000,-0.999848,-0.999391,-0.998630,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.974370,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.933580,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.874620,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.754710,-0.743145,-0.731354,-0.719340,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.629320,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.500000,-0.484810,-0.469472,-0.453990,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.342020,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.087156,-0.069756,-0.052336,-0.034899,-0.017452};
static const float cosx[360] = {1.000000,0.999848,0.999391,0.998630,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.974370,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.933580,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.874620,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798635,0.788011,0.777146,0.766044,0.754710,0.743145,0.731354,0.719340,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.629320,0.615662,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.500000,0.484810,0.469472,0.453991,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.342020,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.087156,0.069757,0.052336,0.034899,0.017452,-0.000000,-0.017452,-0.034899,-0.052336,-0.069756,-0.087156,-0.104529,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.342020,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.453991,-0.469472,-0.484810,-0.500000,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.629320,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.719340,-0.731354,-0.743145,-0.754710,-0.766044,-0.777146,-0.788011,-0.798635,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.874620,-0.882948,-0.891006,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.933580,-0.939693,-0.945519,-0.951056,-0.956305,-0.961262,-0.965926,-0.970296,-0.974370,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.998630,-0.999391,-0.999848,-1.000000,-0.999848,-0.999391,-0.998630,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.974370,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.933580,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891006,-0.882948,-0.874620,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798635,-0.788011,-0.777146,-0.766044,-0.754710,-0.743145,-0.731354,-0.719340,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.629320,-0.615662,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.500000,-0.484810,-0.469472,-0.453991,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.342020,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156435,-0.139173,-0.121869,-0.104528,-0.087156,-0.069757,-0.052336,-0.034899,-0.017452,0.000000,0.017452,0.034899,0.052336,0.069757,0.087156,0.104528,0.121869,0.139173,0.156435,0.173648,0.190809,0.207911,0.224951,0.241922,0.258819,0.275637,0.292371,0.309017,0.325568,0.342020,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.453991,0.469472,0.484810,0.500000,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615662,0.629320,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.719340,0.731354,0.743145,0.754710,0.766044,0.777146,0.788011,0.798635,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.874620,0.882948,0.891006,0.898794,0.906308,0.913545,0.920505,0.927184,0.933580,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.974370,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.998630,0.999391,0.999848};
static const float tgx[360] = {0.000000,0.017455,0.034921,0.052408,0.069927,0.087489,0.105104,0.122785,0.140541,0.158384,0.176327,0.194380,0.212557,0.230868,0.249328,0.267949,0.286745,0.305731,0.324920,0.344328,0.363970,0.383864,0.404026,0.424475,0.445229,0.466308,0.487733,0.509525,0.531709,0.554309,0.577350,0.600861,0.624869,0.649408,0.674508,0.700208,0.726543,0.753554,0.781286,0.809784,0.839100,0.869287,0.900404,0.932515,0.965689,1.000000,1.035530,1.072369,1.110613,1.150368,1.191754,1.234897,1.279942,1.327045,1.376382,1.428148,1.482561,1.539865,1.600335,1.664279,1.732051,1.804048,1.880726,1.962610,2.050304,2.144507,2.246037,2.355853,2.475086,2.605089,2.747477,2.904211,3.077684,3.270853,3.487414,3.732050,4.010781,4.331476,4.704631,5.144556,5.671280,6.313751,7.115370,8.144348,9.514368,11.430044,14.300658,19.081131,28.636255,57.290039,-22877332.000000,-57.290142,-28.636282,-19.081142,-14.300665,-11.430049,-9.514360,-8.144350,-7.115371,-6.313752,-5.671281,-5.144553,-4.704629,-4.331477,-4.010781,-3.732051,-3.487414,-3.270852,-3.077683,-2.904211,-2.747478,-2.605089,-2.475087,-2.355852,-2.246037,-2.144506,-2.050304,-1.962610,-1.880726,-1.804048,-1.732051,-1.664280,-1.600334,-1.539865,-1.482561,-1.428148,-1.376382,-1.327045,-1.279942,-1.234897,-1.191754,-1.150369,-1.110612,-1.072369,-1.035530,-1.000000,-0.965689,-0.932515,-0.900404,-0.869287,-0.839100,-0.809784,-0.781286,-0.753554,-0.726542,-0.700208,-0.674508,-0.649408,-0.624869,-0.600861,-0.577350,-0.554309,-0.531709,-0.509526,-0.487733,-0.466308,-0.445229,-0.424475,-0.404026,-0.383864,-0.363970,-0.344328,-0.324920,-0.305731,-0.286745,-0.267949,-0.249328,-0.230868,-0.212556,-0.194380,-0.176327,-0.158384,-0.140541,-0.122784,-0.105104,-0.087489,-0.069927,-0.052408,-0.034921,-0.017455,0.000000,0.017455,0.034921,0.052408,0.069927,0.087489,0.105104,0.122785,0.140541,0.158384,0.176327,0.194380,0.212557,0.230868,0.249328,0.267949,0.286745,0.305731,0.324920,0.344328,0.363970,0.383864,0.404026,0.424475,0.445229,0.466308,0.487732,0.509525,0.531709,0.554309,0.577350,0.600860,0.624869,0.649408,0.674509,0.700207,0.726543,0.753554,0.781285,0.809784,0.839100,0.869287,0.900404,0.932515,0.965689,1.000000,1.035530,1.072369,1.110613,1.150368,1.191754,1.234897,1.279942,1.327044,1.376383,1.428148,1.482561,1.539865,1.600334,1.664280,1.732051,1.804048,1.880726,1.962610,2.050305,2.144507,2.246037,2.355852,2.475085,2.605090,2.747478,2.904211,3.077682,3.270850,3.487417,3.732052,4.010780,4.331473,4.704625,5.144558,5.671283,6.313749,7.115362,8.144361,9.514376,11.430057,14.300652,19.081076,28.636425,57.290325,-83858280.000000,-57.290249,-28.636406,-19.081066,-14.300647,-11.430053,-9.514374,-8.144360,-7.115361,-6.313748,-5.671283,-5.144557,-4.704635,-4.331473,-4.010780,-3.732051,-3.487416,-3.270855,-3.077682,-2.904211,-2.747478,-2.605090,-2.475085,-2.355852,-2.246037,-2.144507,-2.050305,-1.962610,-1.880726,-1.804048,-1.732051,-1.664280,-1.600334,-1.539865,-1.482561,-1.428148,-1.376383,-1.327044,-1.279941,-1.234897,-1.191754,-1.150369,-1.110612,-1.072369,-1.035530,-1.000000,-0.965688,-0.932515,-0.900404,-0.869287,-0.839100,-0.809784,-0.781285,-0.753554,-0.726543,-0.700208,-0.674508,-0.649407,-0.624869,-0.600861,-0.577351,-0.554309,-0.531709,-0.509525,-0.487733,-0.466308,-0.445228,-0.424475,-0.404026,-0.383864,-0.363970,-0.344327,-0.324920,-0.305731,-0.286746,-0.267949,-0.249328,-0.230868,-0.212557,-0.194380,-0.176327,-0.158384,-0.140541,-0.122785,-0.105104,-0.087488,-0.069927,-0.052408,-0.034921,-0.017455};
static const float ctgx[360] = {-22877332.000000,57.289967,28.636255,19.081137,14.300667,11.430054,9.514364,8.144346,7.115370,6.313751,5.671282,5.144554,4.704630,4.331476,4.010781,3.732051,3.487414,3.270853,3.077683,2.904211,2.747477,2.605089,2.475087,2.355852,2.246037,2.144507,2.050304,1.962610,1.880726,1.804048,1.732051,1.664279,1.600335,1.539865,1.482561,1.428148,1.376382,1.327045,1.279942,1.234897,1.191754,1.150368,1.110613,1.072369,1.035530,1.000000,0.965689,0.932515,0.900404,0.869287,0.839100,0.809784,0.781286,0.753554,0.726543,0.700208,0.674509,0.649408,0.624869,0.600861,0.577350,0.554309,0.531709,0.509526,0.487733,0.466308,0.445229,0.424475,0.404026,0.383864,0.363970,0.344328,0.324920,0.305731,0.286745,0.267949,0.249328,0.230868,0.212557,0.194380,0.176327,0.158384,0.140541,0.122785,0.105104,0.087489,0.069927,0.052408,0.034921,0.017455,-0.000000,-0.017455,-0.034921,-0.052408,-0.069927,-0.087489,-0.105104,-0.122785,-0.140541,-0.158384,-0.176327,-0.194380,-0.212557,-0.230868,-0.249328,-0.267949,-0.286745,-0.305731,-0.324920,-0.344328,-0.363970,-0.383864,-0.404026,-0.424475,-0.445229,-0.466308,-0.487733,-0.509526,-0.531709,-0.554309,-0.577350,-0.600861,-0.624870,-0.649408,-0.674508,-0.700208,-0.726543,-0.753554,-0.781286,-0.809784,-0.839100,-0.869287,-0.900404,-0.932515,-0.965689,-1.000000,-1.035530,-1.072369,-1.110613,-1.150369,-1.191754,-1.234897,-1.279942,-1.327045,-1.376382,-1.428148,-1.482561,-1.539865,-1.600334,-1.664280,-1.732051,-1.804048,-1.880726,-1.962610,-2.050304,-2.144506,-2.246037,-2.355852,-2.475088,-2.605089,-2.747477,-2.904211,-3.077683,-3.270854,-3.487414,-3.732049,-4.010782,-4.331475,-4.704632,-5.144554,-5.671278,-6.313752,-7.115366,-8.144351,-9.514361,-11.430066,-14.300667,-19.081104,-28.636292,-57.289795,11438667.000000,57.290001,28.636343,19.081127,14.300681,11.430043,9.514367,8.144339,7.115369,6.313755,5.671280,5.144556,4.704628,4.331476,4.010783,3.732050,3.487415,3.270852,3.077684,2.904210,2.747477,2.605090,2.475086,2.355853,2.246036,2.144507,2.050304,1.962610,1.880727,1.804047,1.732051,1.664280,1.600335,1.539865,1.482561,1.428148,1.376382,1.327045,1.279942,1.234897,1.191754,1.150368,1.110613,1.072369,1.035530,1.000000,0.965689,0.932515,0.900404,0.869287,0.839099,0.809784,0.781286,0.753554,0.726542,0.700207,0.674508,0.649408,0.624870,0.600860,0.577350,0.554309,0.531710,0.509526,0.487732,0.466308,0.445229,0.424475,0.404026,0.383864,0.363970,0.344328,0.324920,0.305731,0.286745,0.267949,0.249328,0.230868,0.212557,0.194380,0.176327,0.158384,0.140541,0.122784,0.105104,0.087489,0.069927,0.052408,0.034921,0.017455,-0.000000,-0.017455,-0.034921,-0.052408,-0.069927,-0.087489,-0.105104,-0.122784,-0.140541,-0.158385,-0.176327,-0.194380,-0.212556,-0.230868,-0.249328,-0.267949,-0.286745,-0.305730,-0.324920,-0.344328,-0.363970,-0.383864,-0.404027,-0.424475,-0.445229,-0.466308,-0.487732,-0.509526,-0.531710,-0.554309,-0.577350,-0.600860,-0.624870,-0.649408,-0.674509,-0.700207,-0.726542,-0.753554,-0.781286,-0.809784,-0.839099,-0.869286,-0.900404,-0.932515,-0.965689,-1.000000,-1.035531,-1.072369,-1.110613,-1.150368,-1.191753,-1.234898,-1.279942,-1.327045,-1.376382,-1.428147,-1.482561,-1.539865,-1.600335,-1.664279,-1.732050,-1.804049,-1.880727,-1.962610,-2.050303,-2.144506,-2.246038,-2.355853,-2.475086,-2.605088,-2.747475,-2.904212,-3.077684,-3.270852,-3.487412,-3.732054,-4.010783,-4.331476,-4.704628,-5.144549,-5.671289,-6.313756,-7.115371,-8.144341,-9.514348,-11.430078,-14.300686,-19.081135,-28.636169,-57.289299,};



//////////////////////////////VIEW//////////////////////////////


static UIImage* renderImage(UIImage*img,CGSize size, bool aa,bool filtration, bool shadow, bool tile) {
    UIGraphicsBeginImageContext(size);
    CGRect imageRect;
    if(tile) imageRect = CGRectMake(0,0,img.size.width,img.size.height);
    else imageRect = CGRectMake(0,0,size.width,size.height);
    CGContextRef context = UIGraphicsGetCurrentContext();
    if(!filtration) CGContextSetInterpolationQuality(context, kCGInterpolationNone);
    if(shadow) CGContextSetShadowWithColor(context, CGSizeMake(0,0), size.width/8, [UIColor colorWithRed:.3f green:.3f blue:.3f alpha:1.0f].CGColor);
    if(!aa) CGContextSetShouldAntialias(context, NO);
    if(tile) CGContextDrawTiledImage(context, imageRect, img.CGImage);
    else [img drawInRect:imageRect];
    UIImage*image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}
static UILabel* renderLabel(CGRect rect, NSString*text) {
    UILabel*l = [[UILabel alloc]initWithFrame:rect];
    l.font = [UIFont fontWithName:@"Courier-Bold" size:rect.size.height];
    l.backgroundColor = [UIColor clearColor];
    l.text = text;
    return l;
}


//////////////////////////////STRUCT//////////////////////////////


// POS (POSITION)
struct Pos {
    float x;
    float y;
};
typedef struct Pos Pos;
static Pos pos(float x,float y) {
    Pos p;
    p.x = x;
    p.y = y;
    return p;
}
static Pos pointToPos(CGPoint point) {
    Pos p;
    p.x = point.x;
    p.y = point.y;
    return p;
}

static CGPoint posToPoint(Pos pos) {
    CGPoint p;
    p.x = pos.x;
    p.y = pos.y;
    return p;
}

// POS3 (3D POSITION)

struct Pos3 {
    float x;
    float y;
    float z;
};typedef struct Pos3 Pos3;
static Pos3 pos3(float x,float y,float z) {
    Pos3 p;
    p.x = x;
    p.y = y;
    p.z = z;
    return p;
}

//RECT (RECTANGLE)

struct Quad {
    float x;
    float y;
    float w;
    float h;
};
typedef struct Quad Quad;
static Quad quad(float x,float y,float w,float h) {
    Quad q;
    q.x = x;
    q.y = y;
    q.w = w;
    q.h = h;
    return q;
};
static Quad rectToQuad (CGRect rect) {
    return quad(rect.origin.x,rect.origin.y,rect.size.width,rect.size.height);
}
static CGRect quadToRect (Quad quad) {
    return CGRectMake(quad.x,quad.y,quad.w,quad.h);
}

// CORD (COORDINATES)


struct Cord {
    int x;
    int y;
};
typedef struct Cord Cord;

static Cord cord(int x,int y) {
    Cord c;
    c.x = x;
    c.y = y;
    return c;
}
static Cord posToCord(Pos pos) {
    return cord(pos.x,pos.y);
}
static Pos cordToPos(Cord cord) {
    return pos(cord.x,cord.y);
}
static Cord pointToCord(CGPoint point) {
    return cord(point.x,point.y);
}
static CGPoint cordToPoint(Cord cord) {
    return CGPointMake(cord.x,cord.y);
}



//////////////////////////////MATH//////////////////////////////

static NSString* combineStrings (NSString* first, NSString* second, BOOL space) {
    if(space) return [NSString stringWithFormat:@"%@ %@",first,second];
    return [NSString stringWithFormat:@"%@%@",first,second];
}
static float mod (float n) {
    if(n>=0)return n;
    else return -n;
}
static int rdm(int min,int max) {
    int random = arc4random()%(int)(max-min);
    return random+min;
}


//////////////////////////////GEOMETRY//////////////////////////////


static bool intersection_line(Pos start1, Pos end1, Pos start2, Pos end2) {
    
    Pos dir1 = pos(end1.x - start1.x,end1.y - start1.y);
    Pos dir2 = pos(end2.x - start2.x,end2.y - start2.y);
    
    float a1 = -dir1.y;
    float b1 = +dir1.x;
    float d1 = -(a1*start1.x + b1*start1.y);
    
    float a2 = -dir2.y;
    float b2 = +dir2.x;
    float d2 = -(a2*start2.x + b2*start2.y);
    
    float seg1_line2_start = a2*start1.x + b2*start1.y + d2;
    float seg1_line2_end = a2*end1.x + b2*end1.y + d2;
    
    float seg2_line1_start = a1*start2.x + b1*start2.y + d1;
    float seg2_line1_end = a1*end2.x + b1*end2.y + d1;
    
    if (seg1_line2_start * seg1_line2_end >= 0 || seg2_line1_start * seg2_line1_end >= 0)
        return false;
    
    return true;
}
static bool pointInPolygon(Pos point,Pos points[],uint count) {
    uint intersections = 0;
    for(int i=0;i<count;i++) {
        Pos A = pos(point.x,point.y);
        Pos B = pos(point.x+POINT_IN_POLYGON_BEAM_SIZE,point.y);
        Pos C = points[i];
        Pos D;
        if(i!=count-1) {
            D = points[i+1];
        } else {
            D = points[0];
        }
        intersections += intersection_line(A,B,C,D);
    }
    return intersections & 1;
}
static bool inRange (Pos firstPosition, Pos secondPosition, float range) {
    float dx = firstPosition.x - secondPosition.x;
    float dy = firstPosition.y - secondPosition.y;
    float range2 = dx*dx + dy*dy;
    if(range2<range*range) {
        return YES;
    }
    return NO;
}
static float findTimeToPoint(float fx,float sx, float vx) {
    return (sx-fx)/vx;
}
static Pos findDirectionBySpeed(Pos f, Pos s, float speed) {
    return pos((s.x-f.x)/speed,(s.y-f.y)/speed);
}
static float findAngle(float x,float y) {
    float angle = acosf(x);
    if(asinf(y)<0) return -angle;
    return angle;
}
static float findAngleDirection(Pos f,Pos s) {
    float dx = f.x - s.x;
    float dy = f.y - s.y;
    float dist2 = dx*dx + dy*dy;
    float x = dx*dx/dist2;
    float y = dy*dy/dist2;
    float angle = findAngle(x,y);
    return angle;
}
static Pos findDirection(Pos f,Pos s) {
    float dx = s.x - f.x;
    float dy = s.y - f.y;
    float dist2 = dx*dx + dy*dy;
    float x = dx/sqrtf(dist2);
    float y = dy/sqrtf(dist2);
    return pos(x,y);
}
static float findDistanse(CGPoint f,CGPoint s) {
    float dx = f.x - s.x;
    float dy = f.y - s.y;
    float dist2 = dx*dx + dy*dy;
    float distanse = sqrtf(dist2);
    
    return distanse;
}
static Pos isometric_pos(Pos p, float blockSize, int mapWidth) {
    float mid = mapWidth * blockSize / 2.0f;
    float x = (p.x + p.y) / 2.0f - mid / 2.0f;
    float y = -(p.x - p.y - mid) / 2.0f;
    return pos(x,y);
}
static Cord isometric_cord(Pos p, float blockSize, int mapWidth) {
    float mid = mapWidth * blockSize / 2.0f;
    int x = (p.x + p.y) / 2.0f - mid / 2.0f;
    int y = -(p.x - p.y - mid) / 2.0f;
    return cord(x,y);
}
static int normalizeAngle360(int alpha) {
    if( alpha > 360 )
        alpha %= 360;
    if(alpha<0)
        alpha = 360 - (-alpha) % 360;
    
    return alpha;
}
static float normalizeAnglePi(float angle) {
    float angle_2_PI = angle / M_2_PI;
    float newangle = (angle_2_PI - (int)angle_2_PI) * M_2_PI;
    return newangle;
}
static dir4type get4dir( float angle )
{
    angle = normalizeAnglePi( angle + M_PI_4 );
    
    if( angle < M_PI_2 )
    {
        return dir4_east;
    }
    else if( angle < M_PI )
    {
        return dir4_north;
    }
    else if( angle < 3 * M_PI_2 )
    {
        return dir4_west;
    }
    else
    {
        return dir4_south;
    }
}
static dir8type get8dir(float angle)
{
    angle = normalizeAnglePi( angle + M_PI / 12 );
    
    if( angle <= (M_PI_4) )
    {
        return dir8_east;
    }
    else if( angle < (M_PI_2) )
    {
        return dir8_northeast;
    }
    else if( angle <= (3 * M_PI_4) )
    {
        return dir8_north;
    }
    else if( angle < M_PI )
    {
        return dir8_northwest;
    }
    else if( angle <= (5 * M_PI_4) )
    {
        return dir8_west;
    }
    else if( angle < (3 * M_PI_2) )
    {
        return dir8_southwest;
    }
    else if( angle <= (7 * M_PI_4) )
    {
        return dir8_south;
    }
    else
    {
        return dir8_southeast;
    }
}

static quadrant getQuadrant( float angle )
{
    angle = normalizeAnglePi( angle );
    
    if( angle < M_PI / 2 )
    {
        return q_first;
    }
    else if( angle < M_PI )
    {
        return q_second;
    }
    else if( angle < 3 * M_PI / 2 )
    {
        return q_third;
    }
    else
    {
        return q_fourth;
    }
}
#endif